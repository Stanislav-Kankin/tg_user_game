from random import randint
from datetime import datetime, timedelta
import pytz
from typing import Callable, Awaitable, Any

from aiogram import Bot, Dispatcher, BaseMiddleware, F
from aiogram.client.default import DefaultBotProperties
from aiogram.types import (
    Message, Update, WebAppInfo, CallbackQuery, InlineKeyboardButton
    )
from aiogram.filters import CommandStart
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.web_app import safe_parse_webapp_init_data

from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles

from tortoise import Tortoise
import uvicorn

from models import User
from config_reader import config


class UserMiddleware(BaseMiddleware):
    """
    Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
    """
    async def __call__(
        self,
        handler: Callable[[Message, dict[str, Any]], Awaitable[Any]],
        event: Message,
        data: dict[str, Any]
    ) -> Any:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ middleware –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö
        –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–±—ã—Ç–∏—è.

        :param handler: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è.
        :param event: –°–æ–±—ã—Ç–∏–µ.
        :param data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è.
        :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.
        """
        if not event.from_user.username:
            return await event.answer(
                "–ù—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç."
                )

        user = await User.get_or_create(
            id=event.from_user.id, username=event.from_user.username
            )
        data["user"] = user[0]
        return await handler(event, data)


async def lifespan(app: FastAPI):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

    :param app: –≠–∫–∑–µ–º–ø–ª—è—Ä FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    await bot.set_webhook(
        url=f"{config.WEBAPP_URL}/webhook",
        allowed_updates=dp.resolve_used_update_types(),
        drop_pending_updates=True,
    )

    await Tortoise.init(
        db_url=config.DB_URL.get_secret_value(),
        modules={"models": ["models"]}
        )
    await Tortoise.generate_schemas()
    yield
    await Tortoise.close_connections()
    await bot.session.close()

bot = Bot(
    token=config.BOT_TOKEN.get_secret_value(),
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

app = FastAPI(lifespan=lifespan)
templates = Jinja2Templates(directory=config.TEMPLATES_PATH)

dp.message.middleware(UserMiddleware())
app.mount("/static", StaticFiles(directory=config.STATIC_PATH), name="static")


@dp.message(CommandStart())
async def start(message: Message, user: User):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ.
    :param user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
    """
    dict_markup = None
    dt_time_cmd_start = datetime.now(pytz.utc)
    if 1 <= user.number_of_tries <= 5:
        dict_markup = (
            InlineKeyboardBuilder()
            .button(
                text="üçÄ –ò—Å–ø—ã—Ç–∞–π —Å–≤–æ—é —É–¥–∞—á—É!",
                web_app=WebAppInfo(url=config.WEBAPP_URL))
        ).as_markup()
    elif user.number_of_tries <= 0:
        dict_markup = (
            InlineKeyboardBuilder()
            .row(
                InlineKeyboardButton(
                    text="ü§ë –î–æ–±–∞–≤–∏—Ç—å —è—â–∏–∫–∏ —Å–µ–π—á–∞—Å(–ö–£–ü–ò–¢–¨)!",
                    callback_data="pay"
                )
            )
            .row(
                InlineKeyboardButton(
                    text="ü•∞ –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –≤ –≥—Ä—É–ø–ø—É –∏ –ø–æ–ª—É—á–∏—à—å +1 –ø–æ–ø—ã—Ç–∫—É!",
                    callback_data="friend"
                )
            )
        ).as_markup()

    await message.answer(
        f"üéÅ <b>–Ø—â–∏–∫–æ–≤ –æ—Ç–∫—Ä—ã—Ç–æ:</b> <code>{user.luckyboxes['count']}</code> "
        f"(+<code>{user.luckyboxes['cash']}</code>)\n"
        f"üé≤ –û—Å—Ç–∞–ª–æ—Å—å —è—â–∏–∫–æ–≤ <b>{user.number_of_tries}</b>.\n",

        reply_markup=dict_markup
    )
    user.cmd_str = dt_time_cmd_start
    await user.save()
    if user.number_of_tries < 5 and user.next_usage > user.cmd_str:
        user.number_of_tries = user.number_of_tries
    elif user.number_of_tries < 5 and user.next_usage <= user.cmd_str:
        user.number_of_tries = 5
        await user.save()


@dp.callback_query(F.data == "pay")
async def pay(callback_query: CallbackQuery):
    await callback_query.message.answer(
        "—Ç—É—Ç –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã."
    )


@dp.callback_query(F.data == "friend")
async def invite_friend(callback_query: CallbackQuery):
    await callback_query.message.answer(
        "—Ç—É—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–≥–∞ –≤ —Ü–µ–ª–µ–≤—É—é –≥—Ä—É–ø–ø—É."
    )


@app.get("/")
async def root(request: Request):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞.

    :param request: –ó–∞–ø—Ä–æ—Å.
    :return: –û—Ç–≤–µ—Ç —Å —à–∞–±–ª–æ–Ω–æ–º index.html.
    """
    return templates.TemplateResponse("index.html", {"request": request})


@app.post("/open-box")
async def open_box(request: Request):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —è—â–∏–∫–∞.

    :param request: –ó–∞–ø—Ä–æ—Å.
    :return: JSON –æ—Ç–≤–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—Ç–∫—Ä—ã—Ç–∏—è —è—â–∏–∫–∞.
    """
    authorization = request.headers.get("Authentication")
    try:
        data = safe_parse_webapp_init_data(bot.token, authorization)
    except ValueError:
        return JSONResponse({"success": False, "error": "Unauthorized"}, 401)

    dt_current_datetime = datetime.now(pytz.utc)
    dt_next_use = dt_current_datetime + timedelta(seconds=30)

    i_cash = randint(0, 1000)
    user = await User.filter(id=data.user.id).first()

    if user.number_of_tries == 0:
        return JSONResponse(
            {"success": False,
             "error": "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å —Å–µ–π—á–∞—Å. –ù–µ—Ç —è—â–∏–∫–æ–≤. üò¢",
             "cash": -1}
            )

    user.luckyboxes["count"] += 1
    user.luckyboxes["cash"] += i_cash
    user.number_of_tries -= 1
    user.time_of_use = dt_current_datetime
    user.next_usage = dt_next_use

    await user.save()

    return JSONResponse({"success": True, "cash": i_cash})


@app.post("/get-stats")
async def get_stats(request: Request):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        request (Request): –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ.

    Returns:
        JSONResponse: –û—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Raises:
        JSONResponse: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É 401, –µ—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        Authentication –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.
        JSONResponse: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É 404, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.
    """
    authorization = request.headers.get("Authentication")
    try:
        data = safe_parse_webapp_init_data(bot.token, authorization)
    except ValueError:
        return JSONResponse({"success": False, "error": "Unauthorized"}, 401)

    user = await User.filter(id=data.user.id).first()
    if user is None:
        return JSONResponse({"success": False, "error": "User not found"}, 404)

    return JSONResponse({
        "success": True,
        "wins": user.luckyboxes["cash"],
        "total_boxes": user.luckyboxes["count"]
    })


async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    await bot.set_webhook(
        url=f"{config.WEBAPP_URL}/webhook",
        allowed_updates=dp.resolve_used_update_types(),
        drop_pending_updates=True,
    )

    await Tortoise.init(
        db_url=config.DB_URL.get_secret_value(),
        modules={"models": ["models"]}
        )
    await Tortoise.generate_schemas()

    await bot.session.close()


@app.post("/webhook")
async def webhook(request: Request):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è –±–æ—Ç–∞.

    :param request: –ó–∞–ø—Ä–æ—Å.
    """
    update = Update.model_validate(await request.json(), context={"bot": bot})
    await dp.feed_update(bot, update)


if __name__ == "__main__":
    uvicorn.run(app)
